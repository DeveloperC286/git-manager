#!/usr/bin/env bash

# ARG_POSITIONAL_SINGLE([server-url],[positional argument help  msg],[])
# ARG_POSITIONAL_SINGLE([job-token],[positional argument help  msg],[])
# ARG_POSITIONAL_SINGLE([project-id],[positional argument help  msg],[])
# ARG_POSITIONAL_SINGLE([reference],[positional argument help  msg],[])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die() {
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()

print_help() {
	printf 'Usage: %s <server-url> <job-token> <project-id> <reference>\n' "$0"
	printf '\t%s\n' "<server-url>: positional argument help  msg"
	printf '\t%s\n' "<job-token>: positional argument help  msg"
	printf '\t%s\n' "<project-id>: positional argument help  msg"
	printf '\t%s\n' "<reference>: positional argument help  msg"
}

parse_commandline() {
	_positionals_count=0
	while test $# -gt 0; do
		_last_positional="$1"
		_positionals+=("$_last_positional")
		_positionals_count=$((_positionals_count + 1))
		shift
	done
}

handle_passed_args_count() {
	local _required_args_string="'server-url', 'job-token', 'project-id' and 'reference'"
	test "${_positionals_count}" -ge 4 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 4 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 4 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 4 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

assign_positional_args() {
	local _positional_name _shift_for=$1
	_positional_names="_arg_server_url _arg_job_token _arg_project_id _arg_reference "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}; do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -o errexit
set -o xtrace

# Get current version.
current_version=$(cat VERSION)

# If the tag already exist then exit.
new_tag=${current_version}
git tag -l | grep -q "^${new_tag}$" && exit 0

# Get latest tag.
latest_tag=$(git tag --sort=-committerdate | head -1)

# Generate the release description.
release_description=$("${CARGO_HOME}/bin/git-cliff" "${latest_tag}.." --tag "${new_tag}" --strip all)

# Create the new release.
/usr/local/bin/release-cli \
	--server-url "${_arg_server_url}" \
	--job-token "${_arg_job_token}" \
	--project-id "${_arg_project_id}" \
	create \
	--name "${new_tag}" \
	--description "${release_description}" \
	--tag-name "${new_tag}" \
	--ref "${_arg_reference}" \
	--assets-link '{"name":"linux-amd64-binary.zip","url":"https://gitlab.com/DeveloperC/git-manager/-/jobs/artifacts/'${new_tag}'/download?job=release-binary-compiling-linux-amd64"}' \
	--assets-link '{"name":"darwin-amd64-binary.zip","url":"https://gitlab.com/DeveloperC/git-manager/-/jobs/artifacts/'${new_tag}'/download?job=release-binary-compiling-darwin-amd64"}'
# ] <-- needed because of Argbash
